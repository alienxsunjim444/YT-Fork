# jarvis_interactive_bot.py
import requests
from flask import Flask, request
from datetime import datetime
import random
import time

app = Flask(__name__)

ACCESS_TOKEN = "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞_‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï_‡¶™‡ßá‡¶ú_‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏_‡¶ü‡ßã‡¶ï‡ßá‡¶®"
VERIFY_TOKEN = "‡¶Ø‡ßá_‡¶ü‡ßã‡¶ï‡ßá‡¶®_‡¶§‡ßÅ‡¶Æ‡¶ø_‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï_‡¶¶‡¶ø‡ßü‡ßá_‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá"

# ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
conversation_state = {}

def send_message(recipient_id, message_text):
    url = f"https://graph.facebook.com/v15.0/me/messages?access_token={ACCESS_TOKEN}"
    payload = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }
    requests.post(url, json=payload)

def jarvis_response(sender_id, message_text):
    message_text = message_text.lower()
    replies = []

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§
    if sender_id not in conversation_state:
        conversation_state[sender_id] = {"last_question": None}

    state = conversation_state[sender_id]

    # ‡¶Æ‡¶ú‡¶æ ‡¶Æ‡¶ø‡¶∂‡¶ø‡ßü‡ßá ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ + ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®
    if "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã" in message_text or "hello" in message_text:
        replies.append(random.choice([
            "‡¶ì‡¶π‡ßã! ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ‡¶¨‡¶∏ üòé ‡¶Ü‡¶Æ‡¶ø Jarvis‡•§",
            "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶ï‡ßá‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®?"
        ]))
        state["last_question"] = "day_feeling"
    elif "‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßã" in message_text:
        replies.append(random.choice([
            "‡¶∏‡¶¨ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶¨‡¶∏! ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßã?",
            "‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶ï‡ßã‡¶° ‡¶Ü‡¶∞ ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶æ‡¶Å‡¶ö‡¶ø, ‡¶§‡¶¨‡ßÅ‡¶ì ‡¶Æ‡¶ú‡¶æ ‡¶ï‡¶∞‡¶õ‡ßá!"
        ]))
        state["last_question"] = "day_feeling"
    elif state["last_question"] == "day_feeling":
        replies.append(f"‡¶ì‡¶π‡ßã, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá‡¶õ‡ßã '{message_text}'‡•§ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶æ ‡¶§‡ßã ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ó‡ßá‡¶≤ ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
        replies.append("‡¶¨‡¶∏, ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶ï‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶Ü‡¶õ‡ßá?")
        state["last_question"] = "plan"
    elif state["last_question"] == "plan":
        replies.append(f"‡¶Æ‡¶ú‡¶æ ‡¶≤‡¶æ‡¶ó‡¶≤ ‡¶ú‡¶æ‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá‡¶õ‡ßã '{message_text}'‡•§")
        replies.append("‡¶ö‡¶≤ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡ßÅ ‡¶ï‡ßÅ‡¶≤ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶ø, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶ì?")
        state["last_question"] = None
    elif "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶ø" in message_text:
        replies.append("‡¶Ü‡¶Æ‡¶ø Jarvis, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§")
        state["last_question"] = None
    elif "‡¶∏‡¶Æ‡ßü ‡¶ï‡¶§" in message_text or "time" in message_text:
        now = datetime.now().strftime("%I:%M %p")
        replies.append(f"‡¶¨‡¶∏, ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ñ‡¶® {now}‡•§")
        state["last_question"] = None
    else:
        replies.append(random.choice([
            "‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶¨‡¶∏‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø‡•§",
            "‡¶π‡ßÅ‡¶Æ‚Ä¶ ‡¶Ü‡¶∞‡¶ì ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶≤‡ßã?",
            "‡¶Æ‡¶ú‡¶æ ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßú‡¶§‡ßá‡•§"
        ]))
        state["last_question"] = None

    return replies

def send_sequence(recipient_id, messages, delay=1.5):
    for msg in messages:
        send_message(recipient_id, msg)
        time.sleep(delay)

@app.route("/webhook", methods=["GET", "POST"])
def webhook():
    if request.method == "GET":
        token_sent = request.args.get("hub.verify_token")
        return request.args.get("hub.challenge") if token_sent == VERIFY_TOKEN else "Invalid verification token"
    
    if request.method == "POST":
        data = request.get_json()
        for entry in data.get("entry", []):
            for messaging_event in entry.get("messaging", []):
                sender_id = messaging_event["sender"]["id"]
                if "message" in messaging_event:
                    message_text = messaging_event["message"].get("text", "")
                    replies = jarvis_response(sender_id, message_text)
                    send_sequence(sender_id, replies)
        return "ok", 200

if __name__ == "__main__":
    app.run(port=5000)
